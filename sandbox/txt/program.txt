# Documentation for files in src/program/<type>/*.js

>>> ******** General
>>> loc : "local"
Where to run this program at. One of: local, dos, amigappc, gentoo, win2k, winxp

>>> website : "https://entropymine.com/deark/"
A website URL For the program

>>> flags : { inFormat : "Force programid to use this format", ... }
An object of key/value pairs of various flag properties you can set when running the program to modify the behavior of this program

>>> notes : "Blah blah"
Additional notes about this program

>>> ******** Gentoo Specific Properties
>>> gentooOverlay : "dexvert"
Which Gentoo overlay the package is found in, if applicable.

>>> gentooPackage : "app-arch/program"   ||   gentooPackage : ["app-arch/program", "app-text/program"]
Which Gentoo package contains this program.
Can be an array of packages. If so, meta.website and meta.bin must be an array too.

>>> gentooUseFlags : "png jpg midi"
Which Gentoo USE flags should be set.

>>> ******** Properties
>>> unsafe : true
Set to true if this program isn't safe to use with all input files and may produce 'garbage' output


>>> ******** Execute Properties
>>> bin = "binary_program"
The name of the binary to run. Can specifcy an absolute path to the binary. Can use Program.binPath("checkBytes/checkBytes") to get a local dexvert/bin/*
If you have 'bin' you can't have 'exec'

>>> args = async (runState) => ([arg1, arg2])
A function that returns an array of arguments to pass to the binary.
This is executed before running the binary
All args are relative to the CWD of dexState.input.root
Can run r.inFile() to get the input file or r.outFile("out.png") to get the outfile (or generate one called out.png) or r.outDir() for the output dir

>>> runOptions = ({virtualX : true, timeout : xu.MINUTE})   ||   runOptions = async (runState) => ({...})
An object (or a function that returns an object) of run options to be passed into runUtil.run. Will override defaults.

>>> cwd = async r => r.outDir()
If cwd is set, the program will be run from within the supplied directory path instead of in the tmp dir

>>> outExt = ".svg"   ||   async (runState) => { ... }
Return the extension files produced by this program should be renamed to

>>> exec = async (runState) => { ... }
Instead of bin, you can just run abritrary code for this program.

>>> pre = async (runState) => {}
This will be executed directly BEFORE the program is run (either in or exec)

>>> post = async (runState) => { ... }
This will be executed directly AFTER the program has finished running (either bin or exec)

>>> renameOut = { ext : ".png", name : true, regex : /^(?<pre>\d*_?)(?<name>.+)(?<post>\.\d{3}\.(?:png|svg|webp))$/ }
Output files can be automatically renamed.
If ext is a string, the output file will be given that extension
default ext is different per family. So image is .png, audio is .wav, etc
If ext is set to an untruthy value false/null/etc then it won't rename the ext
If name is set to true (the default) the filename will be renamed to the original input name. If set to a string, the filename will be renamed to that string.
If name is set to false, the filename won't be renamed.
If multiple files are possible, then a multiple regex prop can be specified and files will be matched against it.
You can have a named group for "pre" and "post" and anything in-between those will be assumed to be the filename and will get the name specified in renameOut.name

>>> diskQuota = xu.MB*20
Some programs are buggy and will consume the entire hard drive. This is a way to limit that.

>>> chain = "dexvert[asFormat:abc] -> dexvert[asFormat:mid]"  or  async (runState) => ""
Programs can't always produce the end result I want, so you can chain the outputs of one program into a nother program.

>>> verify = async (r, dexFile) => { return false; }
Custom program specific verification function to ensure output file is proper. Return false if the given dexFile isn't good and should be deleted.

>>> qemuData = async (runState) => ({timeout : XU.MINUTE})
Can return an object of QEMU specific data to be passed into util.qemu.run():
	>>> cwd				Which directory to run in
	>>> timeout			Maximum duration to allow it to run before stopping
	>>> script			A list of AutoIt or Amiga script commands to run instad of the standard program execution
	>>> dontMaximize	Pass true to prevent the window from running maximized	


OLD NODE BELOW:
OLD NODE BELOW:
OLD NODE BELOW:
OLD NODE BELOW:
OLD NODE BELOW:
OLD NODE BELOW:
OLD NODE BELOW:
OLD NODE BELOW:





/-------------------------\
| exports.meta Properties |
\-------------------------/
>>> bin : ["bchunk", "sudo"]
An array of binaries that this utilizes. Only set this if gentooPackages is an array.

>>> slow : true
If set to true, this program is known to be quite slow and should not be run more than once per file (for transformed copies for example)


/-----------------\
| Other exports.* |
\-----------------/
>>> qemu = state => "binary_program"
A function that returns the location of the binary to run in QEMU. If it doesn't begin with /[A-Za-z]:/ then it assumes it lives in "c:\dexvert\"

>>> steps = (state, p, r) => ([step1, step2, step3])
A function that returns an array of steps to run serially

>>> preArgs = (state, p, r, cb) => {}
This is executed directly before calling args()



>>> redirectOutput = (state, p, r) => "/path/to/output.txt"
Can return a file path string where stdout from the program should be redirected to

