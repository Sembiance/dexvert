import {xu} from "xu";
import {fileUtil} from "xutil";
import {path, assertStrictEquals} from "std";
import {Program} from "../../src/Program.js";

export default async function buildPrograms(xlog)
{
	const programDirPath = path.join(xu.dirname(import.meta), "..", "..", "src", "program");
	xlog.info`Finding program JS files...`;
	const programFilePaths = await fileUtil.tree(programDirPath, {nodir : true, regex : /[^/]+\/.+\.js$/});
	xlog.info`Processing ${programFilePaths.length} program files...`;

	const relPaths = [];
	const programs = {};

	for(const programFilePath of programFilePaths)
	{
		const progamModule = await import(programFilePath);
		const programid = Object.keys(progamModule)[0];

		// class name must match filename
		assertStrictEquals(programid, path.basename(programFilePath, ".js"), `program file [${programFilePath}] does not have a matching class name [${programid}]`);

		// check for duplicates
		if(programs[programid])
			throw new Error(`program [${programid}] at ${programFilePath} is a duplicate of ${programs[programid]}`);

		// create the class and validate it
		programs[programid] = progamModule[programid].create();
		if(!(programs[programid] instanceof Program))
			throw new Error(`program [${programid}] at [${programFilePath}] is not of type Program`);
		
		if(programs[programid].allowDupOut && !programs[programid].chain && !["unHexACX"].includes(programid))
			xlog.warn`program ${programid} has ${"allowDupOut"} set to true, but does not have a ${"chain"} this is quite dangerous! Could lead to infinite recursion on processing server`;
		
		relPaths.push([programid, path.relative(programDirPath, programFilePath)]);
	}

	xlog.info`Writing programs.js`;
	await fileUtil.writeTextFile(path.join(programDirPath, "programs.js"), `
// DO NOT EDIT MANUALLY
// AUTO GENERATED BY build/buildPrograms.js
// DO NOT EDIT MANUALLY
import {xu} from "xu";
const programs = {};
${relPaths.map(([programid, relPath]) => `import {${programid}} from "./${relPath}";\nprograms.${programid} = ${programid}.create(programs.${programid});`).join("\n")}

export async function reload()
{
	const {programs : newPrograms} = await import(\`./programs.js?v=$\{xu.randStr()}\`);
	Object.clear(programs);
	Object.assign(programs, newPrograms);
}

export {programs};
`);
}
