# Documentation for files in src/program/<type>/*.js

>>> ******** General
>>> loc = "local"
Where to run this program at. One of: local, dos, amigappc, gentoo, win2k, winxp

>>> website = "https://entropymine.com/deark/"
A website URL For the program

>>> flags = { inFormat : "Force programid to use this format", ... }
An object of key/value pairs of various flag properties you can set when running the program to modify the behavior of this program
There are a few 'global' flags that can be specified for any program:
	bulkCopyOut				If a chain is likely to produce a ton of files, set this. I think it's safe? rofl
	filenameEncoding		Which encoding the filenames are likely to be in for proper conversion by convmv
	matchType               If set, this program won't run unless the match type matches the specified value. Only valid in format 'converters' list.
	[strongMatch]			If set, this program won't run unless we have a non-weak MAGIC match
	noAux                   Don't include any aux files in this running of the program
	osHint					Can set various platforms like commodore:true in order to enable a slightly wider identification scope for matching and converting files
	renameKeepFilename		If set to true and there is exactly 1 output file, it will be renamed to the original input filename
	renameOut				A way to override the renameOut of a program
	subOutDir				Will cause all program output files to go in a newly created subdirectory

>>> notes = "Blah blah"
Additional notes about this program

>>> package = "app-arch/program"   ||   package : ["app-arch/program", "app-text/program"]
Which Gentoo package contains this program.
Can be an array of packages. If so, meta.website and meta.bin must be an array too.


>>> ******** Properties
>>> unsafe = true
Set to true if this program isn't safe to use with all input files and may produce 'garbage' output

>>> checkForDups = true
Set to true if this program can produce an output file identical to the original input, which we should delete to avoid infinite recursions

>>> ******** Execute Properties
>>> bin = "binary_program"
The name of the binary to run. Can specifcy an absolute path to the binary. Can use Program.binPath("checkBytes/checkBytes") to get a local dexvert/bin/*
If you have 'bin' you can't have 'exec'

>>> args = async (runState) => ([arg1, arg2])
A function that returns an array of arguments to pass to the binary.
This is executed before running the binary
All args are relative to the CWD of dexState.input.root
Can run r.inFile() to get the input file or r.outFile("out.png") to get the outfile (or generate one called out.png) or r.outDir() for the output dir

>>> runOptions = ({virtualX : true, timeout : xu.MINUTE})   ||   runOptions = async (runState) => ({...})
An object (or a function that returns an object) of run options to be passed into runUtil.run. Will override defaults.
To redirect stdout or stderr to a file, add runOptions value: stdoutFilePath or stderrFilePath

>>> filenameEncoding = "iso-8859-1"   ||    filenameEncoding = async (runState) => "MacRoman"
What encoding the filenames produced by this program are in. Program.js will use convmv to convert them to UTF8 so deno can load/reference them.
Default encoding: windows-1252

>>> cwd = async r => r.outDir()
If cwd is set, the program will be run from within the supplied directory path instead of in the tmp dir

>>> mirrorInToCWD = true  ||  mirrorInToCWD = "copy"
If set to true, then a symlink to (or a copy of) the input file will be placed in the cwd directory. It will be removed directly after program execution.

>>> outExt = ".svg"   ||   async (runState) => { ... }
Return the extension files produced by this program should be renamed to

>>> exec = async (runState) => { ... }
Instead of bin, you can just run abritrary code for this program.

>>> pre = async (runState) => {}
This will be executed directly BEFORE the program is run (either in or exec)

>>> postExec = async (runState) => { ... }
This will be executed DIRECTLY after the program has finished running (either bin or exec), but BEFORE new output files are auto detected by Program.js

>>> post = async (runState) => { ... }
This will be executed after the program has finished running (either bin or exec) and after Program.js has found new output files and renamed them

>>> renameOut = {
>>>             name : "hello", ||  (r, originalInput) => "hello"
>>>            regex : /^.+?(?<num>\.\d{3})?(?<name>\..+)?(?<ext>\..+)$/,
>>>          renamer : [ ({r, newName, newExt, suffix, numFiles, originalExt, fn}, {...groupNames}) => {[name, suffix, ext]}, ... ],
>>>     alwaysRename : true,
>>>     preSensitive : true
>>> }  ||  renameOut = false
Output files can be automatically renamed.
Set this to 'false' to prevent any output file renaming at all, otherwise set it to an object
newName is set to f.input.name by default, but you can set renameOut.name to something else to override this
If regex isn't set and there is only 1 file, it attempts to rename it: newName + suffix + (renameOut.ext || program.outExt || "")
If regex is set then you should also set renamer
The filename will be matched against the regex and a bunch of 'groups' will be created.
Then it will call each renamer function in order, until the result of renaming produces all unique filenames.
Each renamer function should return an array of strings to join together to form the filename.
First rename arg is: {newName, suffix, numFiles, fn}  where suffix is potential extra suffix that should be added and fn is the original output filename
Second arg is the groups that were produced from the regex match.
By default it will only follow the regex renamer if there are more than 1 file, to override this set alwaysRename to true
If preSensitive is set, then this program tends to work with files that have extensions at the start and we should rename with that in mind. So mod.whatever becomes whatever.mod instead of mod

>>> diskQuota = xu.MB*20
Some programs are buggy and will consume the entire hard drive. This is a way to limit that.

>>> chain = "dexvert[asFormat:abc] -> dexvert[asFormat:mid]"  or  async (runState) => ""
Programs can't always produce the end result I want, so you can chain the outputs of one program into a nother program.
If an item begins with a * such as "*joinAsGIF" then all files will be sent as a single input array to 1 invocation of the chain (rather than the default of the chain being invoked for each file)
If an item begins with a ? such as "?dexvert" then the async chainCheck() function is called and if it returns a falsy value then the chain won't be called for that file, otherwise it can return an object of flags to use for the chain call

>>> chainCheck = async (r, dexFile, chainValue) => { return {asFormat : "image/jpeg2000"}; }
Called only if a given chain item begins with a ? and you can return false to skip running the chainValue for the given dexFile or true to allow it.
You can also return an Object to allow it AND set the key/vals in that object as flags to the chainValue invocation.

>>> verify = async (r, dexFile) => { return false; }
Custom program specific verification function to ensure output file is proper. Return false if the given dexFile isn't good and should be deleted.

>>> osData = ({script : ``})  ||  osData = async (runState) => ({timeout : XU.MINUTE})
Can return an object of OS specific data to be passed into osUtil.run():
	>>> cwd				Which directory to run in
	>>> timeout			Maximum duration to allow it to run before stopping
	>>> scriptPre       A list of AutoIt commands to run BEFORE the program executes
	>>> script			A list of AutoIt or Amiga script commands to run instad of the standard program execution
	>>> dontMaximize	Pass true to prevent the window from running maximized	
	>>> quoteArgs		Set to true to quote args
	>>> noAuxFiles		Set this to true to skip copying any aux files into the QEMU

>>> dosData = ({timeout : xu.SECOND*30})  ||  dosData = async (runState) => ({...})
An object or a function that returns and object to be passed into dosUtil.run()
	>>> autoExec		Run this code, INSTEAD of the normal code
	>>> timeout			Maximum duration of dosBox
	>>> runIn			Can be "out" or "prog" to run the executable in the out or prog directory (default is E:\\)
	>>> keys			An array of keys to press, 100ms interval between key presses. Strings are singles keys (or phrases). Special keys should be sub arrays like ["Enter"]. Can also use {delay : xu.SECOND} to insert extra delays between keys

>>> wineData = ({timeout : xu.SECOND*30})  ||  wineData = async (runState) => ({...})
An object or a function that returns and object to be passed into dosUtil.run()
	>>> script			An array of ops or functions to call to 'control' the wine program
	>>> timeout			Maximum duration of wine
	>>> arch			Which wine arch to use: win32 or win64  Default: win32
	>>> base			Which wine prefix base to use. Default: base
	>>> console			Set this to true to run the program in a 'console' window
