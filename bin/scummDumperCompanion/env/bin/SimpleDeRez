#!/mnt/compendium/DevLab/dexvert/bin/scummDumperCompanion/env/bin/python3

# Copyright (c) 2018-2020 Elliot Nunn

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


import argparse
import macresources
import sys

parser = argparse.ArgumentParser(description='''
    Decompile legacy Mac resources to the Rez language. The output will
    always be compatible with Apple Rez, and unless an option
    marked below with [!] is used, the output will match Apple DeRez.
    No attempt is made to access the native Mac resource
    fork, but this can be worked around by appending `/..namedfork/rsrc'
    to the name of the input file.
''')

parser.add_argument('resourceFile', help='file to be decompiled')
parser.add_argument('-ascii', action='store_true', help='[!] guarantee ASCII output')
parser.add_argument('-useDF', action='store_true', help='ignored: data fork is always used')

args = parser.parse_args()

with open(args.resourceFile, 'rb') as f:
    resources = macresources.parse_file(f.read())

try:
	rez = macresources.make_rez_code(resources, ascii_clean=args.ascii)
	sys.stdout.buffer.write(rez)
except BrokenPipeError:
	pass # like we get when we pipe into head
