# Documentation for files in src/program/<type>/*.js

>>> ******** General
>>> loc : "local"
Where to run this program at. One of: local, dos, amigappc, gentoo, win2k, winxp

>>> website : "https://entropymine.com/deark/"
A website URL For the program

>>> flags : { inFormat : "Force programid to use this format", ... }
An object of key/value pairs of various flag properties you can set when running the program to modify the behavior of this program

>>> notes : "Blah blah"
Additional notes about this program

>>> package : "app-arch/program"   ||   package : ["app-arch/program", "app-text/program"]
Which Gentoo package contains this program.
Can be an array of packages. If so, meta.website and meta.bin must be an array too.


>>> ******** Properties
>>> unsafe : true
Set to true if this program isn't safe to use with all input files and may produce 'garbage' output


>>> ******** Execute Properties
>>> bin = "binary_program"
The name of the binary to run. Can specifcy an absolute path to the binary. Can use Program.binPath("checkBytes/checkBytes") to get a local dexvert/bin/*
If you have 'bin' you can't have 'exec'

>>> args = async (runState) => ([arg1, arg2])
A function that returns an array of arguments to pass to the binary.
This is executed before running the binary
All args are relative to the CWD of dexState.input.root
Can run r.inFile() to get the input file or r.outFile("out.png") to get the outfile (or generate one called out.png) or r.outDir() for the output dir

>>> runOptions = ({virtualX : true, timeout : xu.MINUTE})   ||   runOptions = async (runState) => ({...})
An object (or a function that returns an object) of run options to be passed into runUtil.run. Will override defaults.

>>> cwd = async r => r.outDir()
If cwd is set, the program will be run from within the supplied directory path instead of in the tmp dir

>>> symlinkInToCWD = true
If set to true, then a symlink to the input file will be placed in the cwd directory. It will be removed directly after program execution.

>>> outExt = ".svg"   ||   async (runState) => { ... }
Return the extension files produced by this program should be renamed to

>>> exec = async (runState) => { ... }
Instead of bin, you can just run abritrary code for this program.

>>> pre = async (runState) => {}
This will be executed directly BEFORE the program is run (either in or exec)

>>> postExec = async (runState) => { ... }
This will be executed DIRECTLY after the program has finished running (either bin or exec), but BEFORE new output files are auto detected by Program.js

>>> post = async (runState) => { ... }
This will be executed after the program has finished running (either bin or exec) and after Program.js has found new output files

>>> renameOut = {
>>>             name : "hello",
>>>            regex : /^.+?(?<num>\.\d{3})?(?<name>\..+)?(?<ext>\..+)$/,
>>>          renamer : [ ({newName, suffix, numFiles, fn}, {...groupNames}) => {[name, suffix, ext]}, ... ],
>>>     alwaysRename : true
>>> }  ||  renameOut = false
Output files can be automatically renamed.
Set this to 'false' to prevent any output file renaming at all, otherwise set it to an object
newName is set to f.input.name by default, but you can set renameOut.name to something else to override this
If regex isn't set and there is only 1 file, it attempts to rename it: newName + suffix + (renameOut.ext || program.outExt || "")
If regex is set then you should also set renamer
The filename will be matched against the regex and a bunch of 'groups' will be created.
Then it will call each renamer function in order, until the result of renaming produces all unique filenames.
Each renamer function should return an array of strings to join together to form the filename.
First rename arg is: {newName, suffix, numFiles, fn}  where suffix is potential extra suffix that should be added and fn is the original output filename
Second arg is the groups that were produced from the regex match.
By default it will only follow the regex renamer if there are more than 1 file, to override this set alwaysRename to true

>>> diskQuota = xu.MB*20
Some programs are buggy and will consume the entire hard drive. This is a way to limit that.

>>> chain = "dexvert[asFormat:abc] -> dexvert[asFormat:mid]"  or  async (runState) => ""
Programs can't always produce the end result I want, so you can chain the outputs of one program into a nother program.
If an item begins with a * such as "*joinAsGIF" then all files will be sent as a single input array to 1 invocation of the chain (rather than the default of the chain being invoked for each file)
If an item begins with a ? such as "?dexvert" then the async chainCheck() function is called and if it returns a falsy value then the chain won't be called for that file, otherwise it can return an object of flags to use for the chain call

>>> chainCheck = async (r, dexFile, chainValue) => { return {asFormat : "image/jpeg2000"}; }
Called only if a given chain item begins with a ? and you can return false to skip running the chainValue for the given dexFile or true to allow it.
You can also return an Object to allow it AND set the key/vals in that object as flags to the chainValue invocation.

>>> verify = async (r, dexFile) => { return false; }
Custom program specific verification function to ensure output file is proper. Return false if the given dexFile isn't good and should be deleted.

>>> qemuData = async (runState) => ({timeout : XU.MINUTE})
Can return an object of QEMU specific data to be passed into util.qemu.run():
	>>> cwd				Which directory to run in
	>>> timeout			Maximum duration to allow it to run before stopping
	>>> script			A list of AutoIt or Amiga script commands to run instad of the standard program execution
	>>> dontMaximize	Pass true to prevent the window from running maximized	


OLD NODE BELOW:
OLD NODE BELOW:
OLD NODE BELOW:
OLD NODE BELOW:
OLD NODE BELOW:
OLD NODE BELOW:
OLD NODE BELOW:
OLD NODE BELOW:





/-------------------------\
| exports.meta Properties |
\-------------------------/
>>> bin : ["bchunk", "sudo"]
An array of binaries that this utilizes. Only set this if packages is an array.

>>> slow : true
If set to true, this program is known to be quite slow and should not be run more than once per file (for transformed copies for example)


/-----------------\
| Other exports.* |
\-----------------/
>>> qemu = state => "binary_program"
A function that returns the location of the binary to run in QEMU. If it doesn't begin with /[A-Za-z]:/ then it assumes it lives in "c:\dexvert\"

>>> steps = (state, p, r) => ([step1, step2, step3])
A function that returns an array of steps to run serially

>>> preArgs = (state, p, r, cb) => {}
This is executed directly before calling args()



>>> redirectOutput = (state, p, r) => "/path/to/output.txt"
Can return a file path string where stdout from the program should be redirected to

