; script-like file to describe different sound files formats
;---------------------------------------------------------------
;
;	supported, but not tested:
; New Tandy .Snd
; IFF/8SVX
; Sample Vision .smp
;
;	supported & briefly tested:
; raw WAV AU AIFF VOC AVR MOD S3M STM XM
;
;---------------------------------------------------------------
;	brief description of language used in lbpack.ini
;
; strange-like mixing of c-style programs and .ini-scripts
;
; The goal is to describe how to locate sound information
; in input file. Pieces of sounds will be packing, all
; other information will be translating to output file
; unchanged.
;
; all numerical variables are of type long (4 bytes)
; string variables represented in ASCIIZ format
; type conversions aren't exist
;
;	operations:
; + - * / & | ^ > < = ( ) - arithmetics, boolean, comparsion
; [type,adr]		  - gives numerical data from input file
; {len,adr}		  - gives string from input file
;
; type -  type of data, which must be transferred from file:
; b,w,l - byte, 2 bytes, 4 bytes
; e,f	- 2 bytes, 4 bytes high-byte first
;
; len - string length
; adr - data offset from start of file
;
;	data representation:
; "string" 'c'
; 255 0xFF 0377 10000b
;
; in strings you may use non-printable characters with \xxx
; where xxx - octal number (i.e. \134 = '\' , \009 = '\t' )
; operation precedence non exist, even for arithmetic operators
; - use brackets !
; expression always evaluated from left to right
; interpreter aren't sensitive to uppercase and lowercase
;
;	Predefined variables:
; true		= 1
; false 	= 0
; filesize	= length of input file
;
;	Variables, which must be defined into section:
; type		= string variable, contain message about file type
; error 	= string variable, contain error message for '~' operator
; dataLocation	= location of data from start of file (in bytes)
; dataSize	= size of data in bytes
; channelCount	= how channels used (1=mono, 2=stereo)
; sampleSize	= sample size in bytes
; sampleType	= type of sample:
;		    0=unsigned low-byte first;
;		    1=signed low-byte first;
;		    2=u-law;
;		    3=signed delta;
;		    4=unsigned high-byte first;
;		    5=signed high-byte first;
; samplingRate	= sampling rate in Hertz
; showBitrate	= tells packer to show information about bitrate (1)
;		  or not to show (0)
;
;	Operators:
; #  - Pack a piece of file using dataLocation,dataSize,
;      channelCount,sampleSize,sampleType,samplingRate variables
; ~  - Output error message using 'error' variable
; @  - loop breaking		   (C: break)
; $  - go to start of loop	   (C: continue)
; .  - section breaking 	   (C: exit())
; ;  - comment to end of line	   (C: //)
; ! expr ... } - loop
; ? expr :expr1 ... :expr2 ... :% ... } - condition operator
;
;   C-style;
; int i,j;
; for (i=j=0;i<0x10;++i) { j+=i; }
;
;   lbpack.ini-style:
; j=0 i=0 ! i<0x10 j=j+i i=i+1 }
;
;---------------------------------------------------------------

;-----------------------------------------
; formats with sequencing information
;

[XM]   ; section name with file extension in squared brackets

type="FastTracker .XM"
showBitrate=false

? {16,0x0}
  : "Extended Module:"
  ? [w,0x3A]<0x104 :true error="XM: Module is too old and not supported" ~ }

  samplingRate=22050
  channelCount=1

  patts=[w,0x46]
  pat_adr=[w,0x3C]+0x3C
  c_patt=0
  ! c_patt<patts
    pat_adr=pat_adr+[l,pat_adr]+[w,pat_adr+7]
    c_patt=c_patt+1
    }

  insNum=[w,0x48]
  curIns=0
  insAdr=pat_adr
  ! curIns<insNum
    samples=[w,insAdr+0x1B]
    insAdr=insAdr+[l,insAdr]
    smpHdrAdr=insAdr

    dataSize=0
    dataLocation=insAdr+(0x28*samples)

    curSamp=0
    ! curSamp<samples
      dataLocation=dataLocation+dataSize
      dataSize=[l,smpHdrAdr]

      ? [b,smpHdrAdr+0x0E] & 0x10
	: false sampleSize=1
	: %	sampleSize=2
	}
      sampleType=3

      ? dataSize=0 :false # }

      smpHdrAdr=smpHdrAdr+0x28
      curSamp=curSamp+1
      }
    insAdr=dataLocation+dataSize
    curIns=curIns+1
    }
  }

[S3M]

type="Scream Tracker .S3M"
showBitrate=false

? [b,0x1D]
  : 0x10
  ? {4,0x2C}
    : "SCRM"
    insNum=[w,0x22]

    ? [w,0x2A]
      : 1 sampleType=1
      : 2 sampleType=0
      }
    sampleSize=1
    samplingRate=22050
    channelCount=1

    insPtr=0x60+[w,0x20]
    ? [w,20] & 1 :1 insPtr=insPtr+1 }
    curIns=0
    ! curIns<insNum
      insAdr=[w,insPtr]*16

      dataLocation=[w,insAdr+0x0E] * 16
      dataSize=[l,insAdr+0x10]

      #

      insPtr=insPtr+2
      curIns=curIns+1
      }
    }
  }

[STM]

type="Scream Tracker .STM"
showBitrate=false

? {8,0x14}
  : "!Scream!"
  ? [b,0x1D]
    : 0x02

    sampleSize=1
    channelCount=1
    samplingRate=22050
    sampleType=1

    insAdr=0x30
    insNum=0
    ! insNum<31
      ? [b,insAdr]
	: 0
	: %
	  dataLocation=[w,insAdr+0x0E]*16
	  dataSize=[w,insAdr+0x10]
	  #
	}
      insAdr=insAdr+0x20
      insNum=insNum+1
      }
    }
  }

[MOD]

showBitrate=false

smp_max=31
? {4,1080}
  : "1CHN" chans=1
  : "2CHN" chans=2
  : "3CHN" chans=3
  : "4CHN" chans=4
  : "M.K." chans=4
  : "M!K!" chans=4
  : "FLT4" chans=4
  : "5CHN" chans=5
  : "6CHN" chans=6
  : "7CHN" chans=7
  : "8CHN" chans=8
  : "OCTA" chans=8
  : "FLT8" chans=8
  : "9CHN" chans=9
  : "10CH" chans=10
  : "11CH" chans=11
  : "12CH" chans=12
  : "13CH" chans=13
  : "14CH" chans=14
  : "15CH" chans=15
  : "16CH" chans=16
  : "17CH" chans=17
  : "18CH" chans=18
  : "19CH" chans=19
  : "20CH" chans=20
  : "21CH" chans=21
  : "22CH" chans=22
  : "23CH" chans=23
  : "24CH" chans=24
  : "25CH" chans=25
  : "26CH" chans=26
  : "27CH" chans=27
  : "28CH" chans=28
  : "29CH" chans=29
  : "30CH" chans=30
  : "31CH" chans=31
  : "32CH" chans=32
  : % .
  }

? smp_max
  :15
    type="15 instruments Protracker Song/Module .MOD"
    p1=600 p2=470
  :31
    type="Protracker Song/Module .MOD"
    p1=1084 p2=950
  }

? {4,p1}
  : "PACK" error="MOD: packed .MOD song format not supported" ~
  }

cur_pattern=0
patterns=0
! cur_pattern<[b,p2]
  ? patterns<[b,cur_pattern+p2+2]
    :true
    patterns=[b,cur_pattern+p2+2]
    }
  cur_pattern=cur_pattern+1
  }

dataLocation=p1+((patterns+1)*4*chans*64)

smp_number=1
sample_hdr=20
! true
  dataSize=[e,sample_hdr+22]*2

  sampleSize=1
  sampleType=1
  channelCount=1
  samplingRate=22050
  ? dataSize=0 :true :% # }	      ; compress if sample exists

  dataLocation=dataLocation+dataSize
  smp_number=smp_number+1
  sample_hdr=sample_hdr+30
  ? smp_number=smp_max :true . }
  }

;-------------------------------
; Plain formats
;

[VOC]

type="Creative VOC"
showBitrate=false

? {19,0}
  :"Creative Voice File"
  blockPtr=[w,0x14]

  sampleSize=1
  sampleType=0
  channelCount=1

  ! true
    typeOfBlock=[b,blockPtr]
    ? typeOfBlock :0 . }		; Terminator
    sizeOfBlock=[l,blockPtr+1]&0xFFFFFF
    blockPtr=blockPtr+4
    ? typeOfBlock
      : 0x01				; Sound data
      samplingRate=1000000/(256-[b,blockPtr])
      ? [b,blockPtr+1]=0 :false error="VOC: compressed data not supported" ~ }
      dataLocation=blockPtr+2
      dataSize=sizeOfBlock-2
      #
      : 0x02				; Sound continue
      dataLocation=blockPtr
      dataSize=sizeOfBlock
      #
      : 0x08
      channelCount=[b,blockPtr+3]+1
      : 0x09
      samplingRate=[l,blockPtr]
      sampleSize=[b,blockPtr+4]
      channelCount=[b,blockPtr+5]
      ? [w,blockPtr+6]
	: 0x0000 sampleType=0
	: 0x0004 sampleType=1
	: 0x0007 sampleType=2
	: %	 error="VOC: unsupported data format" ~
	}
      dataSize=sizeOfBlock-12
      dataLocation=blockPtr+12
      #
      }
    blockPtr=blockPtr+sizeOfBlock
    ? blockPtr+1>filesize :true error="VOC: terminate block not found"	~ }
    }
  }

[AIF]

type="AIFF/AIFC Audio Interchange"
showBitrate=true

? {4,0}
  :"FORM"

  ? {4,8}
    : "AIFC" format=2
    : "AIFF" format=1
    : % format=0
    }

  ? format=0
    : false
    cur_chnk=12
    fmt_chnk_undef=true
    ! cur_chnk<filesize

      ? {4,cur_chnk}
	: "COMM"
	fmt_chnk_undef=false
	? ([f,cur_chnk+4]=18) | (format=1)
	  : false
	  ? {4,cur_chnk+26}
	    : "NONE"
	    : % error="AIFC: compressed formats are not supported" ~
	    }
	  }

	channelCount=[e,cur_chnk+0x08]
	sampleSize=[e,cur_chnk+0x0E]/8
	dataSize=[f,cur_chnk+0x0A]*sampleSize

	floatPow=[e,cur_chnk+0x10]&0x3FFF
	samplingRate=[e,cur_chnk+0x12]/4
		   ; extracting from IEEE float
	! floatPow>12 samplingRate=SamplingRate*2 floatPow=floatPow-1 }

	: "SSND"
	? fmt_chnk_undef :true error="AIFF/AIFC: COMM chunk expected" ~ }

	dataLocation=cur_chnk+16
	sampleType=5

	#
	}
      to_skip = [f,cur_chnk+4]+8
      cur_chnk=cur_chnk+to_skip
      }
    }
  }

[SND]

type="New Tandy .Snd"
showBitrate=true

? [w,0x2C]
  : 0x801A
  ? [w,0x42] :0 :% error="SND: compressed tandy .snd not supported" ~ }
  insNum=[w,0x2E]
  insPos=0x72
  samplingRate=[w,0x58]
  sampleType=0
  sampleSize=1
  channelCount=1
  curIns=0

  ! curIns<insNum
    dataLocation=[l,insPos+0x0A]
    dataSize=[l,insPos+0x12]

    #

    insPos=[l,insPos]
    curIns=curIns+1
    }
  }

[WAV]

type=".WAV wave"
showBitrate=true

? {4,0}
  :"RIFF"
  ? {4,8}
    :"WAVE"
    cur_chnk=12
    fmt_chnk_undef=true
    ! cur_chnk<filesize
      ? {4,cur_chnk}
	:"fmt\040"
	fmt_chnk_undef=false

	? [w,cur_chnk+8]=1 :false error="WAV: unsupported data format" ~ }
	channelCount=[w,cur_chnk+10]
	samplingRate=[w,cur_chnk+12]

	? [w,cur_chnk+22]
	  :8  sampleSize=1 sampleType=0
	  :16 sampleSize=2 sampleType=1
	  :%  error="WAV: unsupported data format" ~
	  }
	:"data"
	? fmt_chnk_undef :true error="WAV: fmt chunk expected" ~ }

	dataLocation=cur_chnk+8
	dataSize=[l,cur_chnk+4]

	#
	}
      to_skip = [l,cur_chnk+4]+8
      cur_chnk=cur_chnk+to_skip
      }
    }
  }

[AVR]

type="Audio Visual Research .AVR"
showBitrate=true

? {4,0}
  : "2BIT"
    ? [w,12]
      : 0      channelCount=1
      : 0xFFFF channelCount=2
      : % error="AVR: unknown channels identifier" ~
      }
    sampleSize=[w,14]/8
    ? [w,16]
      : 0      sampleType=0
      : 0xFFFF sampleType=1
      : % error="AVR: unknown sample type" ~
      }
    samplingRate=[l,22]
    dataSize=[l,26]*sampleType
    dataLocation=128

    #
  }

[SMP]

type="Sample Vision .smp"
showBitrate=true

? {18,0}
  : "SOUND SAMPLE DATA "

    sampleSize=2
    sampleType=1
    channelCount=1
    samplingRate=22050		; don't sure
    dataSize=[l,112]*2
    dataLoaction=116

    #
  }

[IFF]

type="IFF/8SVX"
showBitrate=true

? {4,0}
  :"FORM"
  ? {4,8}
    :"8SVX"

    channelCount=1
    sampleSize=1
    sampleType=1

    cur_chnk=12
    fmt_chnk_undef=true
    ! cur_chnk<filesize
      ? {4,cur_chnk}
	:"VHDR"
	fmt_chnk_undef=false

	? [w,cur_chnk+0x13]=0 :false error="IFF/8SVX: packed data format unsupported" ~ }
	samplingRate=[w,cur_chnk+0x10]

	:"BODY"
	? fmt_chnk_undef :true error="IFF/8SVX: VHDR chunk expected" ~ }

	dataLocation=cur_chnk+8
	dataSize=[l,cur_chnk+4]

	#
	}
      to_skip = [l,cur_chnk+4]+8
      cur_chnk=cur_chnk+to_skip
      }
    }
  }

[AU]

type="NeXT/Sun .au/.snd"
showBitrate=true

? {4,0}
  :".snd"			; magic word
  dataLocation=[f,4]
  dataSize=[f,8]
  dataFormat=[f,12]
  samplingRate=[f,16]
  channelCount=[f,20]

  ? dataFormat
    :1 sampleSize=1 sampleType=2
    :2 sampleSize=1 sampleType=1
    :3 sampleSize=2 sampleType=1
    :% error="AU: unsupproted data format" ~
    }
  #
  }

;--------------------------------------------------------
; raw formats
;
; if none of previous formats detected this will be used
;

[UL]

type="US telephony"   ; 8 k, 1 channel, 8 bit "U-LAW" encoding
showBitrate=true

  dataLocation=0
  dataSize=filesize
  samplingRate=8000
  channelCount=1
  sampleSize=1
  sampleType=2	      ; u-law
  # .

[8]	      ; 11025Hz, 8 bit, unsigned, mono

type="8 bit unsigned raw"
showBitrate=true

  dataLocation=0
  dataSize=filesize
  samplingRate=11025
  channelCount=1
  sampleSize=1
  sampleType=0
  # .

[8S]	      ; 11025Hz, 8 bit, signed, mono

type="8 bit signed raw"
showBitrate=true

  dataLocation=0
  dataSize=filesize
  samplingRate=11025
  channelCount=1
  sampleSize=1
  sampleType=1
  # .

[16]	       ; 11025Hz, 16 bit, mono

type="16 bit raw"
showBitrate=true

  dataLocation=0
  dataSize=filesize
  samplingRate=11025
  channelCount=1
  sampleSize=2
  sampleType=1
  # .
