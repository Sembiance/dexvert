# Documentation for files in src/format/<family>/*.js

>>> ******** General
>>> name = "Format Name"
A human friendly name for this format. This is the only 'required' property

>>> charSet = "IBM-943"
Can specify what the file encoding is if you know it. Really only used for text files.

>>> mimeType = "image/some-mime"
Some programs like abydos won't convert without a valid mime type specified.

>>> notes = "Notes about the format go here"
You can specify notes about the format here.

>>> website = "http://fileformats.archiveteam.org/wiki/Tricolor_RGB"
A website URL that details this format.


>>> ******** Extension
>>> ext = [".ext", ".ext2"]
An array of extensions this format may have. First item should be the pirmary extension.
All extensions should be lowercase as they are case insentive matches.

>>> forbiddenExt = [".ps"]
An array of extensions that if present will never result in a match.

>>> forbidExtMatch = true   ||   forbidExtMatch = [".gif", ".other"]
If set to true, no ext matches will be allowed on this extension.
If an array, then none of the given extensions will be matched

>>> weakExt = true   ||   weakExt = [".drk"]
Either all extensions (if set to true) or specified extensions are weak and the file should not match if the magic is also weak.

>>> matchPreExt = true
Set to true to also match any 'pre' extension such as mod.africa


>>> ******** Filename
>>> filename = ["FILEID.BIZ", /^filename$/i]
Array of filenames this format may have.
Strings must match exactly to the filename, case sensitive.
Regexes match as a regex. Use /.../i for a case insensitive match

>>> weakFilename = true
Set to true and it must also match magic or extension to match


>>> ******** File Size
>>> fileSize = 28124   ||   fileSize : [8000, 9000, 10000]   ||   fileSize : {".gif" : 3192, ".png" : [24000, 24200]}
If a number, files that are just an extension match, must be exactly this size
If an array, files must be any of the sizes in the array.
If an object, the keys are extensions and files with the given extension must be that file size.

>>> matchFileSize = true
Normally files are not matched against file size because it's a pretty weak match.
You can opt into file size matching if by setting this to true, only do this if you are sure your converter won't produce garbage from garbage.

>>> weakFileSize = [10800]
If the file size is one of these, then mark the match as weak as it's likely a different format

>>> ******** Magic
>>> magic = ["Some Magic", /^More Magic$/]
An array of magics to test against.
If it's a string, the magic must .startWith() the string.
If it's a regex, the magic must match the regex exactly.

>>> forbiddenMagic = ["Not Magic", /^Not This$/]
An array of magics that the file must NOT match.

>>> forbidMagicMatch = true
If set to true, then this format will never match on 'magic'

>>> weakMagic = true || ["Specific Magic", /^That is weak$/]
If true, only match if magic matches AND ALSO ext/filename/fileSize matches.

>>> trustMagic = true
If a magic is marked as unsafe elsewhere, you can trust it explicitly by setting this to true.

>>> ******** Other
>>> auxFiles = (inputFile, otherFiles, otherDirs, {fileSizeMatchExt, xlog}) => [file, file] || false
Some formats require other sibling files/directories to be present in order to convert correctly.
Return an array of DexFiles (filtered from otherFiles/otherDirs) or false if no files were required.
If you return an empty array, that is stating the required files were not found and to not match against this format.
Note: fileSizeMatchExt is set to the extension that fileSize matches, if it matches

>>> idMeta = ({macFileType, macFileCreator}) => { return true; }
A function that matches to see if our format matches various input file metadata like mac file/creator codes or prodos types

>>> byteCheck = {ext : ".xyz", offset : 0, match : [0x00, 0x02] || "string"}  ||  byteCheck = [{}, {}...];
A way to match against a particular part of the file as a way to double check the file is correct.
Can be a single object or an array of objects. The match key can be a string or an array of bytes
ext is a way to restrict the byte check to a given file extension and is OPTIONAL.

>>> idCheck = async (inputFile, detections, {extMatch, filenameMatch, fileSizeMatch, magicMatch, xlog}) => { return true; }
A custom function that must return true for any match to be made against this file

>>> confidenceAdjust : (inputFile, matchType, curConfidence) => (matchType==="ext" ? -20 : 0)
Can adjust the confidence manually up or down. WARNING, this is a last resort hammer. Use VERY sparingly.
Can be useful if a format has a generic extension, or is otherwise easily matched, and the conversion program doesn't check the
file it's converting well enough, often producing garbage or something when a file is mis-identified. 

>>> fallback = true
Specify that this match should be processed DEAD LAST as a match of last resort, a fallback. Use with EXTREME CAUTION.

>>> slow = true
Specify true if this format historically is a very slow format and extra time should be allotted for it's processing

>>> priority = C.PRIORITY.HIGH
If a file matches multiple formats in a single family, this is the priority order for processing.
Options include: TOP, HIGH, STANDARD (default), LOW, VERYLOW

>>> unsupported = true
If set to true, then this file can only be identified by not processed.

>>> untouched = true || async (dexState) { return true; }
Specify that the file will remain as-is and untouched. Use for formats that browsers already support like jpg, pdf, txt, etc.

>>> packed = true
If set to true, this format is a 'packed' format and when running programs renameKeepFilename should be set if the original input file extension isn't part of this formats list of extensions

>>> classify = true
If this is set on a an image format, then the image will be classified as 'garbage' or 'not garbage'
This uses a image classification model trained against a bunch of static and non-static images.
If the image classifies as garbage, it will be deleted.

>>> skipClassify = true
Don't classify. Useful on specific formats where the output tends to be confused as 'garbage'

>>> allow2ColorSVG = true
Set this to allow 2-color SVG output (normally it's forbidden due to being too lax and letting garbage out)

>>> meta = async inputFile => { return {}; }
Format specific function that takes in an input DexFile and should return meta about the input file

>>> ******** Conversion
>>> metaProvider = ["image", "darkTable", "ansiArt", "cueInfo=>cue"]
A list of meta providers to use to get info about the input file for this format.
These are family specific, but you can also include any programid and it will use the meta produced by that program.
You can also specify a subkey with <programid>=><subKey>

>>> keepFilename = true
Don't rename the file safely for input. ONLY USE THIS if the program requires the original filename to be able to convert the file.
NOTE! This will not prevent the program from adding the proper extension, see safeExt for that.
Normally the filename is renamed to in<ext> in order to prevent issues with programs choking on filenames with non-ascii characters

>>> safeExt = async (dexState) { return ".safe"; }
When processing, the extension used is this priority:
1. An extension returned from safeExt() (if present)
2. Original filename extension (IF present in meta.ext array)
3. Extension matched from a fileSize match
4. The first extension in meta.ext array

>>> processed = async (dexState) { ... }
A method that will be executed after each converter is run, return true if we are processed.
This works even if no output files

>>> pre = async (dexState) { ... }
A method that will be executed before any converters are attempted

>>> post = async (dexState) { ... }
A method that will be executed after converters have been attempted

>>> verify = async ({dexState, inputFile, newFile, ...extraValidatorData}) { ... }
A method that will further verify that the given output file is proper

>>> verifyUntouched = true  ||  async dexState => true
Untouched files are not verified if they are a magic match. To force verification, set to true or return true.

>>> converters = ["recoil2png", ...]  ||  async dexState => ["recoil2png", dexState => "", "..."]
An array of converters to try or a function that returns an array of converters to try.
